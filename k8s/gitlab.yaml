---
apiVersion: v1
kind: Service
metadata:
  name: $SERVICE_NAME
spec:
  clusterIP: None
  ports:
  - { port: $PORT_GITLAB_SSH, targetPort: 22, name: ssh }
  - { port: 80, name: $SERVICE_NAME }
  - { port: 443, name: https }
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
---
apiVersion: v1
kind: Service
metadata:
  name: $SERVICE_NAME-nodeport
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
spec:
  type: NodePort
  ports:
  - { port: 22, nodePort: $NODEPORT_GITLAB_SSH, name: ssh }
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
    spec:
      containers:
      - name: $SERVICE_NAME
        command: [/bin/bash]
        args:
        - -c
        - >
          mkdir -p /var/backups/gitlab &&
          rm -fr /var/opt/gitlab/backups &&
          ln -fnsT /var/backups/gitlab /var/opt/gitlab/backups &&
          sh -c 'sh /usr/local/bin/gitback &' &&
          exec /assets/wrapper
        env:
        - name: GITLAB_OMNIBUS_CONFIG
          valueFrom:
            secretKeyRef:
              # Secret should contain base64-encoded string in form
              # "gitlab_rails['db_password']='xxxx';"
              key: omnibus-config
              name: gitlab-db-password
        - { name: TZ, value: $TZ }
        image: gitlab/gitlab-ce:$VERSION_GITLAB
        ports:
        - containerPort: 22
        - containerPort: 80
        - containerPort: 443
        resources:
          limits:
            memory: 6144Mi
          requests:
            cpu: 400m
            memory: 3172Mi
        volumeMounts:
        - mountPath: /etc/gitlab
          name: $SERVICE_NAME
          subPath: config
        - mountPath: /etc/gitlab/gitlab.rb
          name: config
          subPath: gitlab.rb
        - mountPath: /usr/local/bin/gitback
          name: config
          subPath: gitback
        - mountPath: /var/opt/gitlab
          name: $SERVICE_NAME
          subPath: data
        - mountPath: /var/backups
          name: backup
          subPath: $SERVICE_NAME
        - mountPath: /var/log/gitlab
          name: logs
      dnsConfig:
        nameservers: [ $DNS_SERVERS ]
        options:
        - name: use-vc
        - name: ndots
      hostname: git
      nodeSelector:
        service.$SERVICE_NAME: allow
      serviceAccountName: gitlab-pod-privileged
      volumes:
      - name: backup
        hostPath: { path: $PATH_BKP }
      - name: config
        configMap:
          name: $SERVICE_NAME
      - name: logs
        emptyDir: {}
      - name: $SERVICE_NAME
        hostPath: { path: $K8S_VOLUMES_PATH/$SERVICE_NAME }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/enable-access-log: "false"
  name: $SERVICE_NAME-ingress
spec:
  tls:
  - secretName: tls-$SERVICE_NAME
    hosts:
    - git.$MYDOMAIN
  rules:
  - host: git.$MYDOMAIN
    http:
      paths:
      - path: /
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 80
        pathType: Prefix
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: $SERVICE_NAME
data:
  gitlab.rb: |
    external_url 'http://git.$MYDOMAIN'
    gitaly['logging_level'] = 'warn'
    gitlab_rails['db_adapter'] = 'postgresql'
    gitlab_rails['db_encoding'] = 'utf8'
    gitlab_rails['db_host'] = 'dbgitlab.pgo'
    gitlab_rails['db_port'] = 5432
    gitlab_rails['db_username'] = 'gitlab-psql'
    gitlab_rails['smtp_enable'] = true
    gitlab_rails['smtp_address'] = 'smtp.$DOMAIN'
    gitlab_rails['smtp_domain'] = '$HOSTNAME_EMAIL'
    gitlab_rails['smtp_enable_starttls_auto'] = true
    gitlab_rails['smtp_openssl_verify_mode'] = 'none'
    gitlab_rails['smtp_port'] = 25
    gitlab_rails['time_zone'] = '$TZ'
    postgresql['enable'] = false
    # prometheus['flags'] = {
    #   'storage.tsdb.retention' => '3d',
    #   'config.file' => "#{node['gitlab']['prometheus']['home']}/prometheus.yml"
    # }
    prometheus_monitoring['enable'] = false
  gitback: |
    #!/bin/sh

    umask 077
    while [ 1 -eq 1 ]; do
      HOUR=$(date +%H)
      if [ ${DOL}HOUR -eq 16 ]; then
        /opt/gitlab/bin/gitlab-rake gitlab:backup:create
        tar cjf /var/backups/gitlab/gitlab_etc_$(date +%Y%m%d%H).tar.bz /etc/gitlab
      fi
      sleep 3600
    done
