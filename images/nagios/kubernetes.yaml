---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  clusterIP: None
  ports:
  - name: nagios
    port: 8080
  - name: nagiosql
    port: 80
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - { name: AUTHORIZED_USERS, value: $NAGIOS_AUTH_USERS }
        - { name: MAIL_AUTH_USER, value: "$MAIL_AUTH_USER" }
        - { name: MAIL_RELAY_HOST, value: "$NAGIOS_MAIL_RELAY" }
        - { name: NAGIOS_FQDN, value: $NAGIOS_FQDN }
        - { name: NGINX_PORT, value: "8080" }
        - { name: TZ, value: $TZ }
        image: instantlinux/$SERVICE_NAME:$VERSION_NAGIOS
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: 1024Mi
          requests:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - mountPath: /etc/nagios
          name: share
          subPath: $SERVICE_NAME/etc
        - mountPath: /var/nagios
          name: share
          subPath: $SERVICE_NAME/var
        - mountPath: /opt/nagios/plugins
          name: admin
          readOnly: true
          subPath: services/$SERVICE_NAME/plugins
        - mountPath: /run/secrets/nagios-htpasswd
          name: nagios-htpasswd
          subPath: nagios-htpasswd
        - mountPath: /run/secrets/nagios-mail-secret
          name: nagios-mail-secret
          subPath: nagios-mail-secret
      - name: nagiosql
        env:
        - { name: DB_HOST, value: $DB_HOST }
        - { name: NAGIOS_ETC, value: /etc/nagios }
        - { name: TZ, value: $TZ }
        image: instantlinux/nagiosql:$VERSION_NAGIOSQL
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 200m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/nagios
          name: share
          subPath: $SERVICE_NAME/etc
        - mountPath: /var/nagios
          name: share
          subPath: $SERVICE_NAME/var
        - mountPath: /var/www/nagiosql/config
          name: share
          subPath: $SERVICE_NAME/nagiosql_config
        - mountPath: /run/secrets/nagiosql-db-password
          name: nagiosql-db-password
          subPath: nagiosql-db-password
      hostNetwork: $NAGIOS_HOSTNETWORK
      imagePullSecrets: [ $IMAGEPULL_SPEC ]
      initContainers:
      - name: init-nagios
        image: instantlinux/nagios:$VERSION_NAGIOS
        command: [/bin/sh]
        args:
        - -xec
        - >
          [ -e /tmp/etc/nagios.cfg ] || cp -a /etc/nagios/*.cfg* /tmp/etc;
          [ -e /tmp/var/rw ] || cp -a /var/nagios/. /tmp/var
        volumeMounts:
        - mountPath: /tmp/etc
          name: share
          subPath: $SERVICE_NAME/etc
        - mountPath: /tmp/var
          name: share
          subPath: $SERVICE_NAME/var
      - name: init-nagiosql
        image: instantlinux/nagiosql:$VERSION_NAGIOSQL
        command: [/bin/sh]
        args:
        - -xec
        - >
          [ -e /tmp/main.css ] || cp -a /var/www/nagiosql/config/. /tmp;
          if [ ! -d /etc/nagios/objects ]; then
            mkdir /etc/nagios/objects && chown www-data /etc/nagios/objects
          fi
        volumeMounts:
        - mountPath: /tmp
          name: share
          subPath: $SERVICE_NAME/nagiosql_config
      volumes:
      - name: admin
        hostPath: { path: $PATH_ADM }
      - name: share
        hostPath: { path: $PATH_SHR }
      - name: nagios-htpasswd
        secret:
          secretName: nagios-htpasswd
      - name: nagios-mail-secret
        secret:
          secretName: nagios-mail-secret
      - name: nagiosql-db-password
        secret:
          secretName: nagiosql-db-password
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE_NAME-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: nagios-htpasswd
spec:
  tls:
  - secretName: tls-$SERVICE_NAME
    hosts:
    - $SERVICE_NAME.$DOMAIN
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 8080
        pathType: Prefix
      - path: /NagiosQL
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 80
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE_NAME-totp
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-url: http://$AUTHELIA_IP/api/verify
    nginx.ingress.kubernetes.io/auth-signin: https://authtotp.$DOMAIN
spec:
  tls:
  - secretName: tls-$SERVICE_NAME
    hosts:
    - $SERVICE_NAME.$DOMAIN
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /nagios/cgi-bin/cmd.cgi
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 8080
        pathType: Prefix
      - path: /nagios/cgi-bin/cmd.cgi
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 8080
        pathType: Prefix
