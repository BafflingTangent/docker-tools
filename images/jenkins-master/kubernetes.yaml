---
apiVersion: v1
kind: Service
metadata:
  name: $SERVICE_NAME
spec:
  clusterIP: None
  ports:
  - { port: 80, targetPort: 8080 }
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - { name: ARTIFACTORY_URI, value: "https://repo.$DOMAIN/artifactory" }
        - { name: ARTIFACTORY_USER, value: jenkins }
        - { name: JAVA_OPTS, value: -Xmx2048m -Djenkins.install.runSetupWizard=false }
        - { name: JENKINS_URL, value: "https://jenkins.$DOMAIN" }
        - { name: SMTP_ADMIN_ADDRESS, value: "Jenkins <jenkins@$DOMAIN>" }
        - { name: SMTP_SMARTHOST, value: smtp.$DOMAIN }
        - { name: TZ, value: $TZ }
        image: $REGISTRY_URI/jenkins-master:$VERSION_JENKINS_MASTER
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: 6144Mi
          requests:
            cpu: 100m
            memory: 2048Mi
        volumeMounts:
        - mountPath: /var/jenkins_home
          name: share
          subPath: jenkins_home
        - mountPath: /var/jenkins_backup
          name: backup
          subPath: $SERVICE_NAME
        - mountPath: /run/secrets/artifactory-user-password
          name: artifactory-user-password
          subPath: artifactory-user-password
        - mountPath: /run/secrets/jenkins-admin-password
          name: jenkins-admin-password
          subPath: jenkins-admin-password
      dnsConfig:
        options: [ name: ndots ]
      imagePullSecrets: [ $IMAGEPULL_SPEC ]
      volumes:
      - name: share
        hostPath: { path: $PATH_SHR }
      - name: backup
        hostPath: { path: $PATH_BKP }
      - name: artifactory-user-password
        secret:
          secretName: artifactory-user-password
      - name: jenkins-admin-password
        secret:
          secretName: jenkins-admin-password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME-slave
  name: $SERVICE_NAME-slave
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME-slave
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME-slave
    spec:
      containers:
      - name: $SERVICE_NAME-slave
        env:
        - { name: SWARM_JENKINS_SECRET, value: jenkins-agent-password }
        - { name: SWARM_JENKINS_USER, value: svc_jenkins }
        - { name: SWARM_MASTER_URL, value: "http://$(JENKINS_SERVICE_HOST)" }
        - { name: TZ, value: $TZ }
        image: $REGISTRY_URI/jenkins-slave:$VERSION_JENKINS_SLAVE
        volumeMounts:
#        - mountPath: /var/run/docker.sock
#          name: docker-socket
        - mountPath: /run/secrets/jenkins-agent-password
          name: jenkins-agent-password
          subPath: jenkins-agent-password
      dnsConfig:
        nameservers: [ $DNS_SERVERS ]
        options:
        - name: use-vc
        - name: ndots
      imagePullSecrets:
      - name: regcred
      nodeSelector:
        service.jenkins-slave: allow
#      serviceAccountName: $K8S_NAMESPACE-privileged
      volumes:
#      - name: docker-socket
#        hostPath: { path: /var/run/docker.sock }
      - name: jenkins-agent-password
        secret:
          secretName: jenkins-agent-password
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE_NAME-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/enable-access-log: "false"
spec:
  tls:
  - secretName: tls-$SERVICE_NAME
    hosts:
    - $SERVICE_NAME.$DOMAIN
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 80
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE_NAME-totp
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-url: http://$AUTHELIA_IP/api/verify
    nginx.ingress.kubernetes.io/auth-signin: https://authtotp.$DOMAIN
spec:
  tls:
  - secretName: tls-$SERVICE_NAME
    hosts:
    - $SERVICE_NAME.$DOMAIN
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /login
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 80
        pathType: Prefix
