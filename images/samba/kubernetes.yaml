---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - { name: LOG_LEVEL, value: "3" }
        - { name: NETBIOS_NAME, value: $SAMBA_NETBIOS_NAME }
        - { name: SERVER_STRING, value: $SAMBA_SERVER_STRING }
        - { name: TZ, value: $TZ }
        - { name: WORKGROUP, value: $SAMBA_WORKGROUP }
        image: $REGISTRY_URI/$SERVICE_NAME:$VERSION_SAMBA
        resources:
          limits:
            memory: 2048Mi
          requests:
            cpu: 100m
            memory: 384Mi
        volumeMounts:
        - mountPath: /etc/samba/conf.d
          name: admin
          readOnly: true
          subPath: services/$SERVICE_NAME/etc
        - mountPath: /var/lib/samba
          name: share
          subPath: $SERVICE_NAME/var/lib
        - mountPath: /var/log/samba
          name: log
        - mountPath: /pc/dos
          name: dos
          readOnly: true
        - mountPath: /var/ftp
          name: ftp
          readOnly: true
        - mountPath: /pc/Household
          name: household
        - mountPath: /pc/MP3
          name: mp3
          readOnly: true
        - mountPath: /pc/Pictures
          name: pictures
        - mountPath: /run/secrets/samba-admin-password
          name: samba-admin-password
          readOnly: true
          subPath: samba-admin-password
      hostNetwork: true
      imagePullSecrets: [ $IMAGEPULL_SPEC ]
      nodeSelector:
        service.$SERVICE_NAME: allow
      serviceAccountName: $K8S_NAMESPACE-privileged
      volumes:
      - name: samba-admin-password
        secret:
          secretName: samba-admin-password
      - name: admin
        hostPath: { path: $PATH_ADM }
      - name: dos
        hostPath: { path: $K8S_VOLUMES_PATH/dos }
      - name: ftp
        persistentVolumeClaim:
          claimName: ftp
      - name: household
        hostPath: { path: $K8S_VOLUMES_PATH/household }
      - name: log
        emptyDir: {}
      - name: mp3
        persistentVolumeClaim:
          claimName: mp3
      - name: pictures
        persistentVolumeClaim:
          claimName: pictures
      - name: share
        hostPath: { path: $PATH_SHR }
